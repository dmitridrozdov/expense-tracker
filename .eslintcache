[{"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/index.js":"1","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/App.js":"2","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Details/Details.jsx":"3","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Details/styles.js":"4","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/styles.js":"5","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Main.jsx":"6","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/styles.js":"7","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Form/Form.jsx":"8","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Form/styles.js":"9","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/List/List.jsx":"10","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/List/styles.js":"11","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/context/context.js":"12","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/context/contextReducer.js":"13","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/constants/categories.js":"14","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/utils/formatDate.js":"15","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/useTransactions.js":"16"},{"size":430,"mtime":1609628099783,"results":"17","hashOfConfig":"18"},{"size":1031,"mtime":1609630086957,"results":"19","hashOfConfig":"18"},{"size":737,"mtime":1609555188428,"results":"20","hashOfConfig":"18"},{"size":242,"mtime":1608778139624,"results":"21","hashOfConfig":"18"},{"size":551,"mtime":1608780720871,"results":"22","hashOfConfig":"18"},{"size":1327,"mtime":1609968626619,"results":"23","hashOfConfig":"18"},{"size":575,"mtime":1609636614079,"results":"24","hashOfConfig":"18"},{"size":4927,"mtime":1609793155483,"results":"25","hashOfConfig":"18"},{"size":234,"mtime":1609111780179,"results":"26","hashOfConfig":"18"},{"size":1638,"mtime":1609369236952,"results":"27","hashOfConfig":"18"},{"size":398,"mtime":1609143181645,"results":"28","hashOfConfig":"18"},{"size":1010,"mtime":1609967477040,"results":"29","hashOfConfig":"18"},{"size":668,"mtime":1609817712821,"results":"30","hashOfConfig":"18"},{"size":1659,"mtime":1609371756257,"results":"31","hashOfConfig":"18"},{"size":385,"mtime":1609452450962,"results":"32","hashOfConfig":"18"},{"size":1132,"mtime":1609555070881,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"23zj7p",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/index.js",[],["68","69"],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/App.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Details/Details.jsx",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Details/styles.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/styles.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Main.jsx",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/styles.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Form/Form.jsx",["70"],"import React, { useState, useContext, useEffect } from 'react'\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport useStyles from './styles'\nimport { ExpenseTrackerContext } from '../../../context/context'\nimport { v4 as uuv4 } from 'uuid'\nimport { incomeCategories, expenseCategories } from '../../../constants/categories'\nimport formatDate from '../../../utils/formatDate'\nimport { useSpeechContext } from '@speechly/react-client'\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: '',\n    date: formatDate(new Date())\n}\n\nconst Form = () => {\n    const classes = useStyles()\n    const [formData, setFormData] = useState(initialState)\n    const { addTransaction } =  useContext(ExpenseTrackerContext)\n    const { segment } = useSpeechContext()\n\n    const createTransaction = () => {\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return\n        const transaction = {...formData, amount: Number(formData.amount), id: uuv4()}\n        addTransaction(transaction)\n        setFormData(initialState)\n    }\n    \n    useEffect(() => {\n        if(segment) {\n            if(segment.intent.intent === 'add_expense') {\n                setFormData({...formData, type:'Expense'})\n            } else if(segment.intent.intent === 'add_income') {\n                setFormData({...formData, type:'Income'})\n            } else if(segment.isFinal && segment.intent.intent === 'create_transaction') {\n                return createTransaction()\n            } else if(segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n                setFormData(initialState)\n            }\n\n            segment.entities.forEach((e) => {\n                // console.log(e.type + \" => \" + e.value)\n                switch(e.type) {\n                    case 'amount':\n                        setFormData({ ...formData, amount: e.value })\n                        break;\n                    case 'category':\n                        const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\n                        if(incomeCategories.map((iC) => iC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Income', category: category })      \n                        } else if(expenseCategories.map((iC) => iC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Expense', category: category })  \n                        }\n                        break;\n                    case 'date':\n                        setFormData({ ...formData, date: e.value })\n                        break\n                    default:\n                        break;\n                }\n            })\n\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n                createTransaction()\n            }\n        }\n    }, [segment])\n\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Typography align='center' variant='subtitle2' gutterBottom>\n                    { segment && segment.words.map((w) => w.value).join(\" \") }\n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value={formData.type} onChange={(e) => setFormData({...formData, type: e.target.value})}>\n                        <MenuItem value='Income'>Income</MenuItem>\n                        <MenuItem value='Expense'>Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value={formData.category} onChange={(e) => setFormData({...formData, category: e.target.value})}>\n                        {selectedCategories.map((c) =>\n                            <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\n                        )}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type='number' label='Amount' fullWidth value={formData.amount} onChange={(e) => setFormData({...formData, amount: e.target.value})}/>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type='date' label='Date' fullWidth value={formData.date} onChange={(e) => setFormData({...formData, date: formatDate(e.target.value)})}/>\n            </Grid>\n            <Button className={classes.button} variant='outlined' color='primary' fullWidth onClick={createTransaction}>\n                Create\n            </Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/Form/styles.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/List/List.jsx",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/components/Main/List/styles.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/context/context.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/context/contextReducer.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/constants/categories.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/utils/formatDate.js",[],"/Users/dmitri.drozdov/HTML_CSS_JS_FRONTEND/expence-tracker/src/useTransactions.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":68,"column":8,"nodeType":"77","endLine":68,"endColumn":17,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"84","text":"85"},[2934,2943],"[createTransaction, formData, segment]"]